client : for frontend ( web Application) 
server: for backend (node API)

# web Application -> http request -> Node API

# we are using Express : most used pattern in express is MVC

# MVC 
 USER ->use -> CONTROLLER -> manipulates -> MODEL -> updates -> VIEW -> see -> USER 

# Folders inside server
1. models : for MVC
2. Routes : for different routers
   inside it : controllers : defines how we response to that specific route

# Folders in root 
1. client 
2. server

# It is a good practise to separate packages for both client and server
client => own package.json
server => own package.json
root => one package.json at the root level as well  

# always create package.json by : npm init 

# we are given the frontend with package json
1. now we need to install the dependencies : 1. cd client 
                                             2. npm install 
                                             3. npm start

# So we are having our API request to be embedded into request.js under hooks 

# setting up npm package in server side 
1. cd server 
2. npm init -y
2. npm install express

# Installing nodemon : helps preventing restaring the code again and again 
1. npm i nodemon
2. in package json under script =>   "watch": "nodemon src/server.js",
                                     "start": "node src/server.js"


# Try to follow similar pattern as of client 
1. so put src folder in server
2. move all js code in it 
3. also move models. routes into src

NOTE ; make  .gitignore and place /node_modules inside it 

# working on server.js
we can run client and server side on different ports
here client => 3001 and server => 8000

const PORT = process.env.PORT || 8000
if port already exist in the environment and is running then run on it else use port 8000

# setting up express in server.js
1. const express = require('express')
2. const app = express()
3. app.listen()

# creating http 
1. const http = require('http')
2. const server = http.createServer(app)
3. server.listen(PORT, ()=>{
    console.log(`listening on port ${PORT}`)
   }) 

NOTE: http.createServer(app)
we passed 'app' here from our express as any middleware and route handlers attached to app will respond to request coming tp our server 

request -> http -> app => respond using middleware and route handlers 

express is just fancy listner function our build in node http server 

# app.js
=> has express code : helps separating our server functionality from sever in server.js
move all express code here 
1. const express = require('express')
2. const app = express()
3. modules.exports ={app}
server.js : const app = require('./app')
