client : for frontend ( web Application) 
server: for backend (node API)

# web Application -> http request -> Node API

# we are using Express : most used pattern in express is MVC

# MVC 
 USER ->use -> CONTROLLER -> manipulates -> MODEL -> updates -> VIEW -> see -> USER 

# Folders inside server
1. models : for MVC
2. Routes : for different routers
   inside it : controllers : defines how we response to that specific route

# Folders in root 
1. client 
2. server

# It is a good practise to separate packages for both client and server
client => own package.json
server => own package.json
root => one package.json at the root level as well  

# always create package.json by : npm init 

# we are given the frontend with package json
1. now we need to install the dependencies : 1. cd client 
                                             2. npm install 
                                             3. npm start

# So we are having our API request to be embedded into request.js under hooks 

# setting up npm package in server side 
1. cd server 
2. npm init -y
2. npm install express

# Installing nodemon : helps preventing restaring the code again and again 
1. npm i nodemon
2. in package json under script =>   "watch": "nodemon src/server.js",
                                     "start": "node src/server.js"


# Try to follow similar pattern as of client 
1. so put src folder in server
2. move all js code in it 
3. also move models. routes into src

NOTE ; make  .gitignore and place /node_modules inside it 

# working on server.js
we can run client and server side on different ports
here client => 3001 and server => 8000

const PORT = process.env.PORT || 8000
if port already exist in the environment and is running then run on it else use port 8000

# setting up express in server.js
1. const express = require('express')
2. const app = express()
3. app.listen()

# creating http 
1. const http = require('http')
2. const server = http.createServer(app)
3. server.listen(PORT, ()=>{
    console.log(`listening on port ${PORT}`)
   }) 

NOTE: http.createServer(app)
we passed 'app' here from our express as any middleware and route handlers attached to app will respond to request coming tp our server 

request -> http -> app => respond using middleware and route handlers 

express is just fancy listner function our build in node http server 

# app.js
=> has express code : helps separating our server functionality from sever in server.js
move all express code here 
1. const express = require('express')
2. const app = express()
3. modules.exports ={app}
server.js : const app = require('./app')


# Returning planets from our API
1. making router using express 
const express = require('express')
const planetRouter = express.Router()

const getAllPlanets = require('./planets.controller')

@ we need to get all planets 
planetRouter.get('/planets', getAllPlanets).   // getAllPlanets : this function will come from controllers

@ we need to export 
module.exports = {planetRouter}

@ In planets.controller.js
function getAllPlanets(req, res){
  return res.status(200).json(planets).   // so planets is the data that we are accesisng so we have our files in models 
}
module.exports = {getAllPlanets}

@ IN planets.model.js
const planets = []
module.exports = {planets}

@ In apps.js 
const planetsRouter = require('./routes/planets/planets.router')
app.use(planetsRouter)


NOTE : Routers makes direct use of conrollers so better place these files together

MODEL -> planets -> CONTROLLER -> getAllPlanets -> ROUTER -> planetRouter


# Fetching. it on client side 

@ IN request.js
under getAllPlanets
fetch(port of the server)

async function httpGetPlanets() {
  const response = await fetch('http://localhost:8000/planets')
  return await response.json()
}




NOTE: fetch return a promise so use await under asyn function 
       json() also returns a promise so use await under asyn function  


# As soon as we start client there is CORES error

CORE = cross origin request 
=> request made on one origin to a different origin 

origin = protocol + host + port
example http://www.google.com:443/maps/
protocol = http://
host = www.google.com
port = 443 

=> as a security feature same origin and send request to server of that origin not the different ones
ex. google and send request to google server not the facebook server

=> For cross origin request : Acess-Control-Allow-Origin: http:/www.google.com

=> installing CORS 
1. npm install cors

@ IN app.js
1. const cors = require('cors')
2. app.use(cors({origin: 'http://localhost:3000'}))
